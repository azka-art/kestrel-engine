plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.4'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'com.kestrel'
version = '1.0.0'

repositories {
    mavenCentral()
}

ext {
    cucumberVersion = '7.15.0'
    seleniumVersion = '4.16.1'
    restAssuredVersion = '5.4.0'
    junitVersion = '5.10.1'
    allureVersion = '2.24.0'
}

dependencies {
    // BDD Framework
    testImplementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:$cucumberVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.junit.platform:junit-platform-suite:1.10.1"
    
    // Web UI Testing
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.6.2'
    
    // API Testing
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "io.rest-assured:json-schema-validator:$restAssuredVersion"
    
    // Reporting
    testImplementation "io.qameta.allure:allure-cucumber7-jvm:$allureVersion"
    testImplementation "io.qameta.allure:allure-junit5:$allureVersion"
    testImplementation "io.qameta.allure:allure-rest-assured:$allureVersion"
    testImplementation 'net.masterthought:cucumber-reporting:5.7.5'
    
    // Utilities
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

// ===== ALLURE CONFIGURATION =====
allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        autoconfigure.set(true)
        frameworks {
            cucumber7jvm {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

// ===== TEST CONFIGURATION =====
test {
    useJUnitPlatform()
    
    // Test execution properties
    systemProperty 'cucumber.publish.quiet', 'true'
    systemProperty 'cucumber.plugin', [
        'pretty',
        'html:build/reports/cucumber/cucumber.html',
        'json:build/reports/cucumber/cucumber.json',
        'junit:build/reports/cucumber/cucumber.xml',
        'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm'
    ].join(',')
    
    // Allure properties
    systemProperty 'allure.results.directory', 'build/allure-results'
    
    // Test execution settings
    maxParallelForks = 2
    forkEvery = 1
    systemProperties = System.properties
    
    // Configure test output
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    // Ensure reports directory exists
    doFirst {
        file('build/reports/cucumber').mkdirs()
        file('build/allure-results').mkdirs()
    }
    
    // Generate reports after test execution
    finalizedBy 'generateCucumberReports'
}

// ===== API TESTS TASK =====
task apiTests(type: Test) {
    description = 'Run API tests with @api tag'
    group = 'kestrel'
    useJUnitPlatform {
        includeTags 'api'
    }
    include '**/ApiTestRunner.class'
    
    systemProperty 'cucumber.filter.tags', '@api'
    systemProperty 'cucumber.plugin', [
        'pretty',
        'html:build/reports/cucumber/api-tests.html',
        'json:build/reports/cucumber/api-tests.json',
        'junit:build/reports/cucumber/api-tests.xml',
        'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm'
    ].join(',')
    
    systemProperty 'allure.results.directory', 'build/allure-results'
    maxParallelForks = 4
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    doFirst {
        file('build/reports/cucumber').mkdirs()
        file('build/allure-results').mkdirs()
    }
    
    finalizedBy 'generateApiTestReports'
}

// ===== WEB TESTS TASK =====
task webTests(type: Test) {
    description = 'Run Web UI tests with @web tag'
    group = 'kestrel'
    useJUnitPlatform {
        includeTags 'web'
    }
    include '**/WebTestRunner.class'
    
    systemProperty 'cucumber.filter.tags', '@web'
    systemProperty 'cucumber.plugin', [
        'pretty',
        'html:build/reports/cucumber/web-tests.html',
        'json:build/reports/cucumber/web-tests.json',
        'junit:build/reports/cucumber/web-tests.xml',
        'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm'
    ].join(',')
    
    systemProperty 'allure.results.directory', 'build/allure-results'
    maxParallelForks = 2
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    doFirst {
        file('build/reports/cucumber').mkdirs()
        file('build/allure-results').mkdirs()
    }
    
    finalizedBy 'generateWebTestReports'
}

// ===== ALL TESTS TASK =====
task allTests(type: Test) {
    description = 'Run all Kestrel Engine tests'
    group = 'kestrel'
    useJUnitPlatform {
        includeTags 'api | web'
    }
    include '**/AllTestsRunner.class'
    
    systemProperty 'cucumber.plugin', [
        'pretty',
        'html:build/reports/cucumber/all-tests.html',
        'json:build/reports/cucumber/all-tests.json',
        'junit:build/reports/cucumber/all-tests.xml',
        'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm'
    ].join(',')
    
    systemProperty 'allure.results.directory', 'build/allure-results'
    maxParallelForks = Runtime.runtime.availableProcessors()
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    doFirst {
        file('build/reports/cucumber').mkdirs()
        file('build/allure-results').mkdirs()
    }
    
    finalizedBy 'generateAllTestReports'
}

// Fix encoding issues
compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

checkstyle {
    toolVersion = '10.12.4'
    configFile = file('config/checkstyle/checkstyle.xml')
}

spotbugs {
    toolVersion = '4.8.2'
    excludeFilter = file('config/spotbugs/exclude.xml')
}

// ===== REPORTING TASKS =====
task generateCucumberReports {
    group = 'reporting'
    description = 'Generate enhanced Cucumber HTML reports'
    
    doLast {
        if (file('build/reports/cucumber/cucumber.json').exists()) {
            println "ü¶Ö Generating Kestrel Engine Cucumber Reports..."
            println "‚úÖ Basic Cucumber HTML reports generated"
            println "üìÑ Location: build/reports/cucumber/cucumber.html"
        }
    }
}

task generateApiTestReports {
    group = 'reporting'
    description = 'Generate API test reports'
    
    doLast {
        println "ü¶Ö API Test Reports Generated:"
        println "üìÑ HTML: build/reports/cucumber/api-tests.html"
        println "üìÑ JSON: build/reports/cucumber/api-tests.json"
        println "üìÑ XML: build/reports/cucumber/api-tests.xml"
    }
}

task generateWebTestReports {
    group = 'reporting'
    description = 'Generate Web test reports'
    
    doLast {
        println "ü¶Ö Web Test Reports Generated:"
        println "üìÑ HTML: build/reports/cucumber/web-tests.html"
        println "üìÑ JSON: build/reports/cucumber/web-tests.json"
        println "üìÑ XML: build/reports/cucumber/web-tests.xml"
    }
}

task generateAllTestReports {
    group = 'reporting'
    description = 'Generate all test reports'
    
    doLast {
        println "ü¶Ö All Test Reports Generated:"
        println "üìÑ HTML: build/reports/cucumber/all-tests.html"
        println "üìÑ JSON: build/reports/cucumber/all-tests.json"
        println "üìÑ XML: build/reports/cucumber/all-tests.xml"
    }
}

task generateAllureReport {
    group = 'reporting'
    description = 'Generate Allure HTML report'
    dependsOn 'allureReport'
    
    doLast {
        println "ü¶Ö Allure Report Generated:"
        println "üìÑ Open: build/reports/allure-report/index.html"
        println "üåê Or run: ./gradlew allureServe"
    }
}

task generateAllReports {
    group = 'reporting'
    description = 'Generate all available test reports'
    dependsOn 'test'
    
    doLast {
        println "\nü¶Ö ================================="
        println "   KESTREL ENGINE TEST REPORTS"
        println "================================="
        println "üìä Gradle Test Report:"
        println "   build/reports/tests/test/index.html"
        println ""
        println "ü•í Cucumber Reports:"
        println "   build/reports/cucumber/cucumber.html"
        println "   build/reports/cucumber/api-tests.html"
        println "   build/reports/cucumber/web-tests.html"
        println ""
        println "üéØ Allure Report (Enhanced):"
        println "   Run: ./gradlew allureReport"
        println "   Then open: build/reports/allure-report/index.html"
        println "   Or run: ./gradlew allureServe"
        println ""
        println "üìÑ Raw Data:"
        println "   build/reports/cucumber/*.json"
        println "   build/allure-results/*"
        println "================================="
    }
}

task cleanReports {
    group = 'reporting'
    description = 'Clean all report directories'
    
    doLast {
        delete 'build/reports'
        delete 'build/allure-results'
        println "üßπ All report directories cleaned"
    }
}

// ===== REPORT VIEWER TASKS =====
task openReports {
    group = 'reporting'
    description = 'Open test reports in browser'
    
    doLast {
        def reportFile = file('build/reports/tests/test/index.html')
        if (reportFile.exists()) {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                exec { commandLine 'cmd', '/c', 'start', reportFile.absolutePath }
            }
            else if (System.getProperty('os.name').toLowerCase().contains('mac')) {
                exec { commandLine 'open', reportFile.absolutePath }
            }
            else {
                exec { commandLine 'xdg-open', reportFile.absolutePath }
            }
            println "üåê Opening Gradle test report in browser..."
        } else {
            println "‚ùå No test reports found. Run tests first."
        }
    }
}

task openCucumberReport {
    group = 'reporting'
    description = 'Open Cucumber HTML report in browser'
    
    doLast {
        def reportFile = file('build/reports/cucumber/cucumber.html')
        if (reportFile.exists()) {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                exec { commandLine 'cmd', '/c', 'start', reportFile.absolutePath }
            }
            else if (System.getProperty('os.name').toLowerCase().contains('mac')) {
                exec { commandLine 'open', reportFile.absolutePath }
            }
            else {
                exec { commandLine 'xdg-open', reportFile.absolutePath }
            }
            println "üåê Opening Cucumber report in browser..."
        } else {
            println "‚ùå No Cucumber reports found. Run tests first."
        }
    }
}

// ===== UTILITY TASKS =====
task kestrelInfo {
    group = 'help'
    description = 'Display Kestrel Engine information and available tasks'
    
    doLast {
        println "\nü¶Ö ================================="
        println "      KESTREL ENGINE v${version}"
        println "   Hunting Bugs with Surgical Precision"
        println "================================="
        println ""
        println "üéØ TEST EXECUTION:"
        println "   ./gradlew test          # All tests"
        println "   ./gradlew apiTests      # API tests only"
        println "   ./gradlew webTests      # Web tests only"
        println "   ./gradlew allTests      # Complete mission"
        println ""
        println "üìä REPORT GENERATION:"
        println "   ./gradlew generateAllReports"
        println "   ./gradlew allureReport"
        println "   ./gradlew allureServe   # Live server"
        println ""
        println "üåê VIEW REPORTS:"
        println "   ./gradlew openReports"
        println "   ./gradlew openCucumberReport"
        println ""
        println "üßπ CLEANUP:"
        println "   ./gradlew cleanReports"
        println "   ./gradlew clean"
        println ""
        println "Tech Stack:"
        println "‚Ä¢ Java ${System.getProperty('java.version')}"
        println "‚Ä¢ Cucumber ${cucumberVersion}"
        println "‚Ä¢ Selenium ${seleniumVersion}"
        println "‚Ä¢ Rest Assured ${restAssuredVersion}"
        println "‚Ä¢ JUnit ${junitVersion}"
        println ""
        println "üéØ Ready for the hunt!"
        println "================================="
    }
}

task simpleApiTest(type: JavaExec) {
    group = 'kestrel'
    description = 'Test JSONPlaceholder API connectivity'
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.kestrel.debug.SimpleApiTest'
}